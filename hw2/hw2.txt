6. Stack Operation Runtime Analysis
The function bool StackDbl::empty() const calls the function bool LListDbl::empty() const, which compares the variable size_ to 0, for a total of two operations. This is equivalent to theta(1) or constant runtime.
The function void StackDbl::push(const double& value) calls the function void LListDbl::insert(int pos, const double& val) with pos = 0. Insert makes two comparisons to see that pos is valid, and then a third to see that it equals 0. Actually adding the item takes seven steps (plus one comparison to determine if the list was empty). Note that this is the same number as adding to the tail (without the comparison). In total there are 12 operations, equivalent to theta(1) or constant runtime.
The function double const & StackDbl::top() const makes a comparison with the function bool LListDbl::empty(), for two operations. If empty returns true then three operations occur in the else statement, but otherwise double& LListDbl::get(int loc) is called with loc = 0. This in turn calls a helper function which traverses through the list from beginning to loc, which is only three instead of size_ operations when looking at the head instead of the tail. There are a total of seven operations, equivalent to theta(1) or constant runtime.
The function void StackDbl::pop() calls the function void LListDbl::remove(int loc) with loc = 0. Remove makes two comparisons to see that pos is valid, and then a third to see that it equals 0. Actually removing the item takes four steps (plus two comparisons to determine if the list will be emptied). Note that this is the same number as adding to the tail (without the comparisons). In total there are 10 operations, equivalent to theta(1) or constant runtime.
All of my functions are well-designed because they run in constant time with very few steps. Using the tail of the list instead of the head as the top of the stack would have been less efficient, but only because the getNodeAt helper function traverses the whole list. With full access to the head and tail pointers of a doubly linked list, either end could be used for a stack with the same efficiency.